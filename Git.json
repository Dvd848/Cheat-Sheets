{
  "range": "Git!A1:Z999",
  "majorDimension": "ROWS",
  "values": [
    [
      "Category",
      "Subcategory",
      "Weight",
      "Is Starred?",
      "Command",
      "Description",
      "More Info",
      "Output"
    ],
    [
      "Commands",
      "clone",
      "0",
      "Yes",
      "git clone \u003crepository\u003e",
      "Clone a repository into a new directory.",
      "https://git-scm.com/docs/git-clone\nhttps://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository",
      "$ git clone https://github.com/schacon/ticgit\nCloning into 'ticgit'...\nremote: Reusing existing pack: 1857, done.\nremote: Total 1857 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.\nResolving deltas: 100% (772/772), done.\nChecking connectivity... done."
    ],
    [
      "Commands",
      "clone",
      "10",
      "No",
      "git clone \u003crepository\u003e \u003cdirectory\u003e",
      "Clone a repository into a new directory, and provide the directory name.",
      "https://git-scm.com/docs/git-clone\nhttps://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository",
      "$ git clone https://github.com/libgit2/libgit2 mylibgit"
    ],
    [
      "Commands",
      "status",
      "0",
      "Yes",
      "git status",
      "Show the working tree status.",
      "https://git-scm.com/docs/git-status\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working tree clean\n$ echo 'My Project' \u003e README\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files:\n(use \"git add \u003cfile\u003e...\" to include in what will be committed)\nREADME\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ git add README\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n(use \"git restore --staged \u003cfile\u003e...\" to unstage)\nnew file: README\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n(use \"git reset HEAD \u003cfile\u003e...\" to unstage)\nnew file: README\nChanges not staged for commit:\n(use \"git add \u003cfile\u003e...\" to update what will be committed)\n(use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\nmodified: CONTRIBUTING.md"
    ],
    [
      "Commands",
      "status",
      "10",
      "No",
      "git status --short",
      "Show the working tree status in a shorter manner.\nTriggers: `-s`, `--short`\nNew files that aren’t tracked have a `??` next to them, new files that have been added to the staging area have an `A`, modified files have an `M` and so on. There are two columns to the output: The left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree.",
      "https://git-scm.com/docs/git-status\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git status -s\nM README\nMM Rakefile\nA lib/git.rb\nM lib/simplegit.rb\n?? LICENSE.txt"
    ],
    [
      "Commands",
      "add",
      "0",
      "Yes",
      "git add \u003cpath\u003e",
      "Add file contents to the index.",
      "https://git-scm.com/docs/git-add",
      "$ git add README"
    ],
    [
      "Commands",
      "diff",
      "0",
      "Yes",
      "git diff",
      "Compare what's in the working directory with what's in the staging area.",
      "https://git-scm.com/docs/git-diff\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git diff\ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex 8ebb991..643e24f 100644\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -65,7 +65,8 @@ branch directly, things can get messy.\n Please include a nice description of your changes when you submit your PR;\n if we have to read the whole diff to figure out why you're contributing\n in the first place, you're less likely to get feedback and have your change\n-merged in.\n+merged in. Also, split your changes into comprehensive chunks if your patch is\n+longer than a dozen lines.\n\n If you are starting to work on a particular area, feel free to submit a PR\n that highlights your work in progress (and note in the PR title that it's"
    ],
    [
      "Commands",
      "diff",
      "10",
      "Yes",
      "git diff --staged",
      "Compare what's in the staging area to the last commit.\n`--staged` and `--cached` are synonyms.",
      "https://git-scm.com/docs/git-diff\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git diff --staged\ndiff --git a/README b/README\nnew file mode 100644\nindex 0000000..03902a1\n--- /dev/null\n+++ b/README\n@@ -0,0 +1 @@\n+My Project"
    ],
    [
      "Commands",
      "commit",
      "0",
      "Yes",
      "git commit",
      "Record changes to the repository.",
      "https://git-scm.com/docs/git-commit\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git commit"
    ],
    [
      "Commands",
      "commit",
      "10",
      "Yes",
      "git commit -m \"\u003cmessage\u003e\"",
      "Record changes to the repository, provide commit message inline.",
      "https://git-scm.com/docs/git-commit\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git commit -m \"Story 182: fix benchmarks for speed\"\n[master 463dc4f] Story 182: fix benchmarks for speed\n 2 files changed, 2 insertions(+)\n create mode 100644 README"
    ],
    [
      "Commands",
      "commit",
      "20",
      "No",
      "git commit -a -m \"\u003cmessage\u003e\"",
      "Record changes to the repository and provide commit message inline while skipping staging area.",
      "https://git-scm.com/docs/git-commit\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n(use \"git add \u003cfile\u003e...\" to update what will be committed)\n(use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\nmodified: CONTRIBUTING.md\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git commit -a -m 'Add new benchmarks'\n[master 83e38c7] Add new benchmarks\n1 file changed, 5 insertions(+), 0 deletions(-)"
    ],
    [
      "Commands",
      "rm",
      "0",
      "Yes",
      "git rm \u003cpath\u003e",
      "Remove a path from the working tree and from the index.",
      "https://git-scm.com/docs/git-rm\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git rm PROJECTS.md\nrm 'PROJECTS.md'\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n(use \"git reset HEAD \u003cfile\u003e...\" to unstage)\ndeleted: PROJECTS.md\n$ git rm log/\\*.log\n$ git rm \\*~"
    ],
    [
      "Commands",
      "rm",
      "10",
      "Yes",
      "git rm --cached \u003cpath\u003e",
      "Remove a path from the staging area while keeping it in the working tree.",
      "https://git-scm.com/docs/git-rm\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git rm --cached README"
    ],
    [
      "Commands",
      "mv",
      "0",
      "Yes",
      "git mv \u003cfile_from\u003e \u003cfile_to\u003e",
      "Move or rename a file, a directory, or a symlink.",
      "https://git-scm.com/docs/git-mv\nhttps://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
      "$ git mv README.md README\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n(use \"git reset HEAD \u003cfile\u003e...\" to unstage)\nrenamed: README.md -\u003e README"
    ],
    [
      "Commands",
      "log",
      "0",
      "Yes",
      "git log",
      "Show commit logs.\n\nBy default, `git log` will only show commit history below the branch you’ve checked out.\n\nTo show commit history for the desired branch you have to explicitly specify it: `git log testing`. To show all of the branches, add `--all` to your git log command.\n",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Mon Mar 17 21:52:11 2008 -0700\nChange version number\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Sat Mar 15 16:40:33 2008 -0700\nRemove unnecessary test\ncommit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Sat Mar 15 10:31:28 2008 -0700\nInitial commit"
    ],
    [
      "Commands",
      "log",
      "10",
      "Yes",
      "git log --patch",
      "Show commit logs as diff.\n\nRecommended syntax: `git log -p -M --follow --stat -- path/to/file`",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History\nhttps://web.archive.org/web/20160515170215/http://blog.andrewray.me/a-better-git-blame/",
      "$ git log -p -2\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Mon Mar 17 21:52:11 2008 -0700\nChange version number\ndiff --git a/Rakefile b/Rakefile\nindex a874b73..8f94139 100644\n--- a/Rakefile\n+++ b/Rakefile\n@@ -5,7 +5,7 @@ require 'rake/gempackagetask'\nspec = Gem::Specification.new do |s|\ns.platform = Gem::Platform::RUBY\ns.name = \"simplegit\"\n- s.version = \"0.1.0\"\n+ s.version = \"0.1.1\"\ns.author = \"Scott Chacon\"\ns.email = \"schacon@gee-mail.com\"\ns.summary = \"A simple gem for using Git in Ruby code.\"\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Sat Mar 15 16:40:33 2008 -0700\nRemove unnecessary test\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex a0a60ae..47c6340 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -18,8 +18,3 @@ class SimpleGit\nend\nend\n-\n-if $0 == __FILE__\n- git = SimpleGit.new\n- puts git.show\n-end"
    ],
    [
      "Commands",
      "log",
      "20",
      "No",
      "git log -\u003cnumber\u003e",
      "Show commit logs, limit the number of commits to output.\nTriggers: `-\u003cnumber\u003e`, `-n \u003cnumber\u003e`, `--max-count=\u003cnumber\u003e`",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log -3\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Mon Mar 17 21:52:11 2008 -0700\nChange version number\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Sat Mar 15 16:40:33 2008 -0700\nRemove unnecessary test\ncommit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Sat Mar 15 10:31:28 2008 -0700\nInitial commit"
    ],
    [
      "Commands",
      "log",
      "30",
      "No",
      "git log --pretty=\u003cformat\u003e",
      "Show commit logs with special format.\nShortcut for `--pretty=oneline`: `--oneline`",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 Change version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Remove unnecessary test\na11bef06a3f659402fe7563abf99ad00de2209e6 Initial commit\n\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\nca82a6d - Scott Chacon, 6 years ago : Change version number\n085bb3b - Scott Chacon, 6 years ago : Remove unnecessary test\na11bef0 - Scott Chacon, 6 years ago : Initial commit\n\n$ git log --pretty=fuller -1\ncommit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0\nAuthor:     Jessica Smith \u003cjessica@example.com\u003e\nAuthorDate: Sun Apr 6 10:17:23 2008 -0700\nCommit:     Scott Chacon \u003cschacon@gmail.com\u003e\nCommitDate: Thu Apr 9 09:19:06 2009 -0700\n\n   Add limit to log function\n\n   Limit log functionality to the first 20"
    ],
    [
      "Commands",
      "log",
      "40",
      "No",
      "git log --graph",
      "Show commit logs with ASCII branch graph.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 Ignore errors from SIGCHLD on trap\n* 5e3ee11 Merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 Add method for getting the current branch\n* | 30e367c Timeout code and tests\n* | 5a09431 Add timeout protection to grit\n* | e1193f8 Support for heads with slashes in them\n|/\n* d6016bc Require time for xmlschema\n* 11d191e Merge branch 'defunkt' into local"
    ],
    [
      "Commands",
      "log",
      "50",
      "No",
      "git log --since=\u003cdate\u003e",
      "Show commit logs since a specific date.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log --since=2.weeks\n\n$ git log --since=\"2008-01-15\"\n\n$ git log --since=\"2 years 1 day 3 minutes ago\""
    ],
    [
      "Commands",
      "log",
      "60",
      "No",
      "git log --until=\u003cdate\u003e",
      "Show commit logs until a specific date.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log --until=2.weeks\n\n$ git log --until=\"2008-01-15\"\n\n$ git log --until=\"2 years 1 day 3 minutes ago\""
    ],
    [
      "Commands",
      "log",
      "70",
      "No",
      "git log --author=\u003cauthor\u003e",
      "Show commit logs by a specific author.\n\nYou can specify more than one instance of the --author search criteria, which will limit the commit output to commits that match any of the --author patterns.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log --author='Junio C Hamano'"
    ],
    [
      "Commands",
      "log",
      "80",
      "No",
      "git log --grep=\u003cpattern\u003e",
      "Show commit logs containing keyword in the commit message.\n\nYou can specify more than one instance of `--grep` search criteria, which will limit the commit output to commits that match any of the `--grep` patterns; however, adding the --all-match option further limits the output to just those commits that match all `--grep` patterns.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log --grep=\"Refactoring\""
    ],
    [
      "Commands",
      "log",
      "90",
      "No",
      "git log -S \u003cstring\u003e",
      "Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file.\n\nTakes a string and shows only those commits that changed the number of occurrences of that string.\n\nIf you need to be more specific, you can provide a regular expression to search for with the `-G` option.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History\nhttps://git-scm.com/book/en/v2/Git-Tools-Searching",
      "$ git log -S function_name\n\n$ git log -S ZLIB_BUF_MAX --oneline\ne01503b zlib: allow feeding more than 4GB in one go\nef49a7a zlib: zlib can only process 4GB at a time"
    ],
    [
      "Commands",
      "log",
      "100",
      "No",
      "git log -- \u003cpath/to/file\u003e",
      "Limit the log output to commits that introduced a change to the specified files.\n\nThis is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log -- path/to/file"
    ],
    [
      "Commands",
      "log",
      "110",
      "No",
      "git log --no-merges",
      "Show the whole commit history, but skip any merges.\n\n\nDepending on the workflow used in your repository, it’s possible that a sizable percentage of the commits in your log history are just merge commits, which typically aren’t very informative. To prevent the display of merge commits cluttering up your log history, simply add the log option `--no-merges`.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
      "$ git log --no-merges"
    ],
    [
      "Commands",
      "commit",
      "30",
      "Yes",
      "git commit --amend",
      "Redo the most recent commit, make the additional changes that were forgotten, stage them, and commit again.\nThis command takes your staging area and uses it for the commit. If you’ve made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you’ll change is your commit message.\nIt’s important to understand that when you’re amending your last commit, you’re not so much fixing it as replacing it entirely with a new, improved commit that pushes the old commit out of the way and puts the new commit in its place. Effectively, it’s as if the previous commit never happened, and it won’t show up in your repository history.\nThe obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository history with commit messages of the form, “Oops, forgot to add a file” or “Fixing a typo in last commit”.\nOnly amend commits that are still local and have not been pushed somewhere. Amending previously pushed commits and force pushing the branch will cause problems for your collaborators.",
      "https://git-scm.com/docs/git-commit\nhttps://git-scm.com/book/en/v2/Git-Basics-Undoing-Things\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History",
      "$ git commit -m 'Initial commit'\n$ git add forgotten_file\n$ git commit --amend"
    ],
    [
      "Commands",
      "reset",
      "0",
      "Yes",
      "git reset HEAD \u003cfile\u003e...",
      "Unstage a staged file.\n\nEssentially it just copies the file(s) from HEAD to the index, without modifying the working directory.\n\nGeneral form: `git reset \u003ccommit\u003e \u003cfile\u003e...`. \nIf no commit is provided, `HEAD` is assumed, so this is the same as `git reset \u003cfile\u003e...` (and essentially a shorthand for `git reset --mixed HEAD \u003cfile\u003e...`.\n\nConsider using `git restore` instead.",
      "https://git-scm.com/docs/git-reset\nhttps://git-scm.com/book/en/v2/Git-Basics-Undoing-Things\nhttps://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified",
      "$ git add *\n$ git status\nOn branch master\nChanges to be committed:\n(use \"git reset HEAD \u003cfile\u003e...\" to unstage)\nrenamed: README.md -\u003e README\nmodified: CONTRIBUTING.md\n$ git reset HEAD CONTRIBUTING.md\nUnstaged changes after reset:\nM        CONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n(use \"git reset HEAD \u003cfile\u003e...\" to unstage)\nrenamed: README.md -\u003e README\nChanges not staged for commit:\n(use \"git add \u003cfile\u003e...\" to update what will be committed)\n(use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\nmodified: CONTRIBUTING.md\n\n$ git reset eb43bf file.txt"
    ],
    [
      "Commands",
      "checkout",
      "20",
      "Yes",
      "git checkout -- \u003cfile\u003e...",
      "Revert a modified file.\n\nConsider using `git restore` instead.\n\nIt’s important to understand that `git checkout -- \u003cfile\u003e` is a dangerous command. Any local changes you made to that file are gone — Git just replaced that file with the last staged or committed version. Don’t ever use this command unless you absolutely know that you don’t want those unsaved local changes.",
      "https://git-scm.com/docs/git-checkout\nhttps://git-scm.com/book/en/v2/Git-Basics-Undoing-Things",
      "Changes not staged for commit:\n(use \"git add \u003cfile\u003e...\" to update what will be committed)\n(use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\nmodified: CONTRIBUTING.md\n$ git checkout -- CONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n(use \"git reset HEAD \u003cfile\u003e...\" to unstage)\nrenamed: README.md -\u003e README"
    ],
    [
      "Commands",
      "restore",
      "0",
      "No",
      "git restore --staged \u003cfile\u003e...",
      "Unstage a staged file.",
      "https://git-scm.com/docs/git-restore\nhttps://git-scm.com/book/en/v2/Git-Basics-Undoing-Things",
      "$ git add *\n$ git status\nOn branch master\nChanges to be committed:\n(use \"git restore --staged \u003cfile\u003e...\" to unstage)\nmodified: CONTRIBUTING.md\nrenamed: README.md -\u003e README\n$ git restore --staged CONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n(use \"git restore --staged \u003cfile\u003e...\" to unstage)\nrenamed: README.md -\u003e README\nChanges not staged for commit:\n(use \"git add \u003cfile\u003e...\" to update what will be committed)\n(use \"git restore \u003cfile\u003e...\" to discard changes in working directory)\nmodified: CONTRIBUTING.md"
    ],
    [
      "Commands",
      "restore",
      "10",
      "No",
      "git restore \u003cfile\u003e...",
      "Revert a modified file.\n\nIt’s important to understand that `git restore \u003cfile\u003e` is a dangerous command. Any local changes you made to that file are gone — Git just replaced that file with the last staged or committed version. Don’t ever use this command unless you absolutely know that you don’t want those unsaved local changes.",
      "https://git-scm.com/docs/git-restore\nhttps://git-scm.com/book/en/v2/Git-Basics-Undoing-Things",
      "Changes not staged for commit:\n(use \"git add \u003cfile\u003e...\" to update what will be committed)\n(use \"git restore \u003cfile\u003e...\" to discard changes in working directory)\nmodified: CONTRIBUTING.md\n$ git restore CONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n(use \"git restore --staged \u003cfile\u003e...\" to unstage)\nrenamed: README.md -\u003e README"
    ],
    [
      "Commands",
      "remote",
      "0",
      "No",
      "git remote",
      "Show the remotes.",
      "https://git-scm.com/docs/git-remote\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",
      "$ git remote\norigin\n\n$ git remote -v\norigin\thttps://github.com/schacon/ticgit (fetch)\norigin\thttps://github.com/schacon/ticgit (push)"
    ],
    [
      "Commands",
      "remote",
      "10",
      "No",
      "git remote add \u003cshortname\u003e \u003curl\u003e",
      "Add a remote.",
      "https://git-scm.com/docs/git-remote\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",
      "$ git remote\norigin\n$ git remote add pb https://github.com/paulboone/ticgit\n$ git remote -v\norigin\thttps://github.com/schacon/ticgit (fetch)\norigin\thttps://github.com/schacon/ticgit (push)\npb\thttps://github.com/paulboone/ticgit (fetch)\npb\thttps://github.com/paulboone/ticgit (push)"
    ],
    [
      "Commands",
      "fetch",
      "0",
      "Yes",
      "git fetch",
      "Download objects and refs from another repository.\nNote that the `git fetch` command only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.",
      "https://git-scm.com/docs/git-fetch\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",
      "$ git fetch"
    ],
    [
      "Commands",
      "fetch",
      "10",
      "No",
      "git fetch \u003cremote\u003e",
      "Download objects and refs from another repository.",
      "https://git-scm.com/docs/git-fetch\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes\nhttps://git-scm.com/book/en/v2/Git-Branching-Remote-Branches",
      "$ git fetch pb\nremote: Counting objects: 43, done.\nremote: Compressing objects: 100% (36/36), done.\nremote: Total 43 (delta 10), reused 31 (delta 5)\nUnpacking objects: 100% (43/43), done.\nFrom https://github.com/paulboone/ticgit\n* [new branch] master -\u003e pb/master\n* [new branch] ticgit -\u003e pb/ticgit"
    ],
    [
      "Commands",
      "pull",
      "0",
      "No",
      "git pull",
      "Fetch from and integrate with another repository or a local branch.\n\nEssentially this is a `git fetch` immediately followed by a `git merge` in most cases.",
      "https://git-scm.com/docs/git-pull\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes\nhttps://git-scm.com/book/en/v2/Git-Branching-Remote-Branches",
      "$ git pull"
    ],
    [
      "Commands",
      "push",
      "0",
      "Yes",
      "git push \u003cremote\u003e \u003cbranch\u003e",
      "Upload local repository content to a remote repository.",
      "https://git-scm.com/docs/git-push\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes\nhttps://git-scm.com/book/en/v2/Git-Branching-Remote-Branches",
      "$ git push origin master"
    ],
    [
      "Commands",
      "remote",
      "20",
      "No",
      "git remote show \u003cremote\u003e",
      "See more information about a particular remote.\n\nThis command shows which branch is automatically pushed to when you run `git push` while on certain branches. It also shows you which remote branches on the server you don’t yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you run `git pull`.",
      "https://git-scm.com/docs/git-remote\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",
      "$ git remote show origin\n* remote origin\nURL: https://github.com/my-org/complex-project\nFetch URL: https://github.com/my-org/complex-project\nPush URL: https://github.com/my-org/complex-project\nHEAD branch: master\nRemote branches:\nmaster tracked\ndev-branch tracked\nmarkdown-strip tracked\nissue-43 new (next fetch will store in remotes/origin)\nissue-45 new (next fetch will store in remotes/origin)\nrefs/remotes/origin/issue-11 stale (use 'git remote prune' to remove)\nLocal branches configured for 'git pull':\ndev-branch merges with remote dev-branch\nmaster merges with remote master\nLocal refs configured for 'git push':\ndev-branch pushes to dev-branch (up to date)\nmarkdown-strip pushes to markdown-strip (up to date)\nmaster pushes to master (up to date)"
    ],
    [
      "Commands",
      "remote",
      "30",
      "No",
      "git remote rename \u003cold\u003e \u003cnew\u003e",
      "Rename a remote.",
      "https://git-scm.com/docs/git-remote\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",
      "$ git remote rename pb paul\n$ git remote\norigin\npaul"
    ],
    [
      "Commands",
      "remote",
      "40",
      "No",
      "git remote remove \u003cremote\u003e",
      "Remove a remote.\n\nOnce you delete the reference to a remote this way, all remote-tracking branches and configuration settings associated with that remote are also deleted.",
      "https://git-scm.com/docs/git-remote\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",
      "$ git remote remove paul\n$ git remote\norigin"
    ],
    [
      "Commands",
      "tag",
      "0",
      "Yes",
      "git tag",
      "List existing tags.",
      "https://git-scm.com/docs/git-tag\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git tag\nv1.0\nv2.0"
    ],
    [
      "Commands",
      "tag",
      "10",
      "No",
      "git tag -l \"\u003ctagname\u003e\"",
      "List existing tags with filter.\nTriggers: `-l`, `--list`",
      "https://git-scm.com/docs/git-tag\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git tag -l \"v1.8.5*\"\nv1.8.5\nv1.8.5-rc0\nv1.8.5-rc1\nv1.8.5-rc2\nv1.8.5-rc3\nv1.8.5.1\nv1.8.5.2\nv1.8.5.3\nv1.8.5.4\nv1.8.5.5"
    ],
    [
      "Commands",
      "tag",
      "20",
      "No",
      "git tag -a \u003ctagname\u003e -m \"\u003cmessage\u003e\"",
      "Create an annotated tag.\n\nAnnotated tags are meant for release.\n\nThe `-m` specifies a tagging message, which is stored with the tag. If you don’t specify a message for an annotated tag, Git launches your editor so you can type it in.\n\nBy default, the `git push` command doesn’t transfer tags to remote servers, they need to be pushed explicitly (see `git push`).",
      "https://git-scm.com/docs/git-tag\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git tag -a v1.4 -m \"my version 1.4\"\n$ git tag\nv0.1\nv1.3\nv1.4"
    ],
    [
      "Commands",
      "show",
      "0",
      "No",
      "git show \u003ctagname\u003e",
      "Show details about a given tag.",
      "https://git-scm.com/docs/git-show\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git show v1.4 # annotated\ntag v1.4\nTagger: Ben Straub \u003cben@straub.cc\u003e\nDate: Sat May 3 20:19:12 2014 -0700\nmy version 1.4\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Mon Mar 17 21:52:11 2008 -0700\nChange version number\n$ git show v1.4-lw # lightweight\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon \u003cschacon@gee-mail.com\u003e\nDate: Mon Mar 17 21:52:11 2008 -0700\nChange version number"
    ],
    [
      "Commands",
      "tag",
      "30",
      "No",
      "git tag \u003ctagname\u003e",
      "Create a lightweight tag.\n\nLightweight tags are meant for private or temporary object labels.\n\nBy default, the `git push` command doesn’t transfer tags to remote servers, they need to be pushed explicitly (see `git push`).",
      "https://git-scm.com/docs/git-tag\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git tag v1.4-lw\n$ git tag\nv0.1\nv1.3\nv1.4\nv1.4-lw\nv1.5"
    ],
    [
      "Commands",
      "tag",
      "40",
      "No",
      "git tag -a \u003ctagname\u003e \u003ccommit_hash\u003e",
      "Tag a specific commit.\n\nBy default, the `git push` command doesn’t transfer tags to remote servers, they need to be pushed explicitly (see `git push`).",
      "https://git-scm.com/docs/git-tag\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git tag -a v1.2 9fceb02"
    ],
    [
      "Commands",
      "push",
      "10",
      "No",
      "git push \u003cremote\u003e \u003ctagname\u003e",
      "Push a tag to a remote.\n\nBy default, the `git push` command doesn’t transfer tags to remote servers. You will have to explicitly push tags to a shared server after you have created them.",
      "https://git-scm.com/docs/git-push\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git push origin v1.5\nCounting objects: 14, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (12/12), done.\nWriting objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.\nTotal 14 (delta 3), reused 0 (delta 0)\nTo git@github.com:schacon/simplegit.git\n* [new tag] v1.5 -\u003e v1.5"
    ],
    [
      "Commands",
      "push",
      "20",
      "No",
      "git push \u003cremote\u003e --tags",
      "Push all tags to a remote.\n\nThis will transfer all of your tags to the remote server that are not already there.\n\n`git push \u003cremote\u003e --tags` will push both lightweight and annotated tags. There is currently no option to push only lightweight tags, but if you use `git push \u003cremote\u003e --follow-tags` only annotated tags will be pushed to the remote.",
      "https://git-scm.com/docs/git-push\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git push origin --tags\nCounting objects: 1, done.\nWriting objects: 100% (1/1), 160 bytes | 0 bytes/s, done.\nTotal 1 (delta 0), reused 0 (delta 0)\nTo git@github.com:schacon/simplegit.git\n* [new tag] v1.4 -\u003e v1.4\n* [new tag] v1.4-lw -\u003e v1.4-lw"
    ],
    [
      "Commands",
      "tag",
      "50",
      "No",
      "git tag -d \u003ctagname\u003e",
      "Delete a tag from the local repository.\n\nNote that this does not remove the tag from any remote servers. There are two common variations for deleting a tag from a remote server.",
      "https://git-scm.com/docs/git-tag\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git tag -d v1.4-lw\nDeleted tag 'v1.4-lw' (was e7d5add)"
    ],
    [
      "Commands",
      "push",
      "30",
      "No",
      "git push \u003cremote\u003e --delete \u003ctagname\u003e",
      "Delete a tag from the remote repository.",
      "https://git-scm.com/docs/git-push\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git push origin --delete \u003ctagname\u003e"
    ],
    [
      "Commands",
      "checkout",
      "5",
      "No",
      "git checkout \u003ctagname\u003e",
      "Checkout the versions of files a tag is pointing to.\nThis puts your repository in “detached HEAD” state. In this state, if you make changes and then create a commit, the tag will stay the same, but your new commit won’t belong to any branch and will be unreachable, except by the exact commit hash.",
      "https://git-scm.com/docs/git-checkout\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git checkout v2.0.0\nNote: switching to 'v2.0.0'.\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\ngit switch -c \u003cnew-branch-name\u003e\nOr undo this operation with:\ngit switch -\nTurn off this advice by setting config variable advice.detachedHead to false\nHEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final\n$ git checkout v2.0-beta-0.1\nPrevious HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final\nHEAD is now at df3f601... Add atlas.json and cover image"
    ],
    [
      "Commands",
      "checkout",
      "20",
      "No",
      "git checkout -b \u003cbranchname\u003e \u003ctagname\u003e",
      "Checkout the versions of files a tag is pointing to, while creating a branch.",
      "https://git-scm.com/docs/git-checkout\nhttps://git-scm.com/book/en/v2/Git-Basics-Tagging",
      "$ git checkout -b version2 v2.0.0\nSwitched to a new branch 'version2'"
    ],
    [
      "Commands",
      "config",
      "0",
      "No",
      "git config alias.\u003calias\u003e \u003ccommand\u003e",
      "Create an alias for a command.\n\nTo run an external command, rather than a Git subcommand, start the command with a `!` character.",
      "https://git-scm.com/docs/git-config\nhttps://git-scm.com/book/en/v2/Git-Basics-Git-Aliases",
      "$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n$ git config --global alias.unstage 'reset HEAD --'\n$ git config --global alias.last 'log -1 HEAD'\n$ git config --global alias.visual '!gitk'"
    ],
    [
      "Commands",
      "init",
      "0",
      "Yes",
      "git init",
      "Create an empty Git repository or reinitialize an existing one.",
      "https://git-scm.com/docs/git-init\nhttps://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository",
      "$ git init"
    ],
    [
      "Commands",
      "branch",
      "100",
      "Yes",
      "git branch \u003cbranchname\u003e",
      "Create a new branch.\n\nThis creates a new pointer to the same commit you’re currently on (where `HEAD` is pointing to).",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell",
      "$ git branch testing"
    ],
    [
      "Commands",
      "log",
      "120",
      "No",
      "git log --oneline --decorate",
      "View the git log with extra info of where the branch pointers are pointing to.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell",
      "$ git log --oneline --decorate\nf30ab (HEAD -\u003e master, testing) Add feature #32 - ability to add new formats to the central interface\n34ac2 Fix bug #1328 - stack overflow under certain conditions\n98ca9 Initial commit"
    ],
    [
      "Commands",
      "checkout",
      "0",
      "Yes",
      "git checkout \u003cbranchname\u003e",
      "Switch to a given branch.\n\nThis moves HEAD to point to the given branch.\n\nRunning `git checkout [branch]` is pretty similar to running `git reset --hard [branch]` in that it updates all three trees for you to look like `[branch]`, but there are two important differences.\n\nFirst, unlike `reset --hard`, `checkout` is working-directory safe; it will check to make sure it’s not blowing away files that have changes to them. Actually, it’s a bit smarter than that — it tries to do a trivial merge in the working directory, so all of the files you haven’t changed will be updated. `reset --hard`, on the other hand, will simply replace everything across the board without checking.\n\nThe second important difference is how checkout updates `HEAD`. Whereas `reset` will move the branch that `HEAD` points to, checkout will move `HEAD` itself to point to another branch.",
      "https://git-scm.com/docs/git-checkout\nhttps://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell\nhttps://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified",
      "$ git checkout testing"
    ],
    [
      "Commands",
      "log",
      "130",
      "Yes",
      "git log --oneline --decorate --graph --all",
      "View the git log with extra info of where all the branch pointers are pointing to as a graph.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell",
      "$ git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) Made other changes\n| * 87ab2 (testing) Made a change\n|/\n* f30ab Add feature #32 - ability to add new formats to the central interface\n* 34ac2 Fix bug #1328 - stack overflow under certain conditions\n* 98ca9 initial commit of my project"
    ],
    [
      "Commands",
      "checkout",
      "40",
      "Yes",
      "git checkout -b \u003cnewbranchname\u003e \u003cbranchname\u003e",
      "Create a new branch and switch to it at the same time.\n\n`\u003cnewbranchname\u003e` is the new branch name, and it will initially point to the same commit as `\u003cbranch\u003e` does.",
      "https://git-scm.com/docs/git-checkout\nhttps://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell\nhttps://git-scm.com/book/en/v2/Git-Branching-Remote-Branches"
    ],
    [
      "Commands",
      "switch",
      "0",
      "Yes",
      "git switch \u003cbranch\u003e",
      "Switch to an existing branch.",
      "https://git-scm.com/docs/git-switch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell"
    ],
    [
      "Commands",
      "switch",
      "10",
      "No",
      "git switch -c \u003cnewbranchname\u003e",
      "Create a new branch and switch to it.\n\nTriggers: `-c`, `--create`\n",
      "https://git-scm.com/docs/git-switch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell"
    ],
    [
      "Commands",
      "switch",
      "20",
      "No",
      "git switch -",
      "Return to the previously checked out branch.",
      "https://git-scm.com/docs/git-switch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell"
    ],
    [
      "Workflows",
      "Branching",
      "10",
      "No",
      "\u003cGetting interrupted with a higher priority fix\u003e",
      "Getting interrupted with a higher priority fix.\n\n 1. Do some work on a website.\n 2. Create a branch for a new user story you’re working on.\n 3. Do some work in that branch.\n 4. Switch to your production branch.\n 5. Create a branch to add the hotfix.\n 6. After it’s tested, merge the hotfix branch, and push to production.\n 7. Switch back to your original user story and continue working.\n\n\nNote that if your working directory or staging area has uncommitted changes that conflict with the branch you’re checking out, Git won’t let you switch branches. It’s best to have a clean working state when you switch branches.",
      "https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging",
      "$ git checkout -b iss53\nSwitched to a new branch \"iss53\"\n$ vim index.html\n$ git commit -a -m 'Create new footer [issue 53]'\n$ git checkout master\nSwitched to branch 'master'\n$ git checkout -b hotfix\nSwitched to a new branch 'hotfix'\n$ vim index.html\n$ git commit -a -m 'Fix broken email address'\n[hotfix 1fb7853] Fix broken email address\n 1 file changed, 2 insertions(+)\n$ git checkout master\n$ git merge hotfix\nUpdating f42c576..3a0874c\nFast-forward\n index.html | 2 ++\n 1 file changed, 2 insertions(+)\n$ git branch -d hotfix\nDeleted branch hotfix (3a0874c).\n$ git checkout iss53\nSwitched to branch \"iss53\"\n$ vim index.html\n$ git commit -a -m 'Finish the new footer [issue 53]'\n[iss53 ad82d7a] Finish the new footer [issue 53]\n1 file changed, 1 insertion(+)\n$ git checkout master\nSwitched to branch 'master'\n$ git merge iss53\nMerge made by the 'recursive' strategy.\nindex.html |    1 +\n1 file changed, 1 insertion(+)\n$ git branch -d iss53"
    ],
    [
      "Commands",
      "merge",
      "0",
      "Yes",
      "git merge \u003cbranchname\u003e",
      "Merge a branch into the current branch.",
      "https://git-scm.com/docs/git-merge\nhttps://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging\nhttps://git-scm.com/book/en/v2/Git-Branching-Remote-Branches\nhttps://www.biteinteractive.com/understanding-git-merge/",
      "$ git checkout master\n$ git merge hotfix\nUpdating f42c576..3a0874c\nFast-forward\n index.html | 2 ++\n 1 file changed, 2 insertions(+)"
    ],
    [
      "Commands",
      "branch",
      "110",
      "Yes",
      "git branch -d \u003cbranchname\u003e",
      "Delete a branch.\n\nNote: If the branch contains work that wasn't merged yet, git might refuse to delete the branch.\nTo force it, use `-D` instead.\n",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging",
      "$ git branch -d hotfix\nDeleted branch hotfix (3a0874c)."
    ],
    [
      "Workflows",
      "Branching",
      "20",
      "No",
      "\u003cMerging conflicts\u003e",
      "Merging conflicts.\n\n 1. Attempt to merge the branches\n 2. Identify that git complains about conflicts\n 3. Resolve the conflicts\n 4. Add each file back to the staging area to mark the conflict resolved\n 5. Check status to confirm no conflicts remain\n 6. Commit change\n",
      "https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging",
      "$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add \u003cfile\u003e...\" to mark resolution)\n\n    both modified:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ # Resolve conflicts (perhaps by running git mergetool)\n$ git add index.html\n\n$ git status\nOn branch master\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n    modified:   index.html\n$ git commit\nMerge branch 'iss53'\n\nConflicts:\n    index.html\n#\n# It looks like you may be committing a merge.\n# If this is not correct, please remove the file\n#\t.git/MERGE_HEAD\n# and try again.\n\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# All conflicts fixed but you are still merging.\n#\n# Changes to be committed:\n#\tmodified:   index.html\n#\n"
    ],
    [
      "Commands",
      "mergetool",
      "0",
      "No",
      "git mergetool",
      "Run merge conflict resolution tools to resolve merge conflicts.",
      "https://git-scm.com/docs/git-mergetool\nhttps://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"
    ],
    [
      "Workflows",
      "Branching",
      "0",
      "No",
      "\u003cSimple fix\u003e",
      "A simple fix.\n 1. Create a branch for the fix\n 2. Fix the issue\n 3. Merge the fix to the main branch\n 4. Delete the branch\n",
      "https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging",
      "$ git checkout -b iss53\nSwitched to a new branch \"iss53\"\n$ vim index.html\n$ git commit -a -m 'Create new footer [issue 53]'\n$ git checkout master\nSwitched to branch 'master'\n$ git merge iss53\nMerge made by the 'recursive' strategy.\nindex.html |    1 +\n1 file changed, 1 insertion(+)\n$ git branch -d iss53"
    ],
    [
      "Commands",
      "branch",
      "0",
      "Yes",
      "git branch",
      "View existing branches.\n\nThe `*` indicates the branch that you currently have checked out (i.e., the branch that `HEAD` points to).\n",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branch-Management",
      "$ git branch\n  iss53\n* master\n  testing"
    ],
    [
      "Commands",
      "branch",
      "10",
      "No",
      "git branch -v",
      "View the last commit on each branch.",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branch-Management",
      "$ git branch -v\n  iss53   93b412c Fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 Add scott to the author list in the readme"
    ],
    [
      "Commands",
      "branch",
      "20",
      "No",
      "git branch --merged",
      "View only the branches that you have merged into the branch you’re currently on.",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branch-Management",
      "$ git branch --merged\n  iss53\n* master"
    ],
    [
      "Commands",
      "branch",
      "30",
      "No",
      "git branch --no-merged",
      "View only the branches that you have not merged into the branch you’re currently on.",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branch-Management",
      "$ git branch --no-merged\n  testing"
    ],
    [
      "Commands",
      "branch",
      "111",
      "Yes",
      "git branch -D \u003cbranchname\u003e",
      "Force-delete a branch.\n\nThis might be needed if the branch contains work that has not yet been merged.\nShortcut for `--delete --force`\n",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branch-Management",
      "$ git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'.\n$ git branch -D testing"
    ],
    [
      "Commands",
      "branch",
      "21",
      "No",
      "git branch --merged \u003cbranchname\u003e",
      "View only the branches that you have merged into the provided branch.",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branch-Management",
      "$ git checkout testing\n$ git branch --merged master\n  topicA\n  featureB"
    ],
    [
      "Commands",
      "branch",
      "31",
      "No",
      "git branch --no-merged \u003cbranchname\u003e",
      "View only the branches that you have not merged into the provided branch.",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branch-Management",
      "$ git checkout testing\n$ git branch --no-merged master\n  topicA\n  featureB"
    ],
    [
      "Commands",
      "branch",
      "40",
      "No",
      "git branch --move \u003coldname\u003e \u003cnewname\u003e",
      "Rename a branch locally.\n\nCollaborators won't see the change until the branch is pushed upstream using:\n`git push --set-upstream \u003cremote\u003e \u003cnewname\u003e`\n",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branch-Management",
      "$ git branch --move bad-branch-name corrected-branch-name\n"
    ],
    [
      "Workflows",
      "Branching",
      "30",
      "No",
      "\u003cRename a branch remotely\u003e",
      "Rename a branch remotely.\n 1. Rename the branch locally\n 2. Push the new branch upstream\n 3. Delete the old branch from the remote\n\nDo not rename branches that are still in use by other collaborators. Do not rename a branch like master/main/mainline without further research.\n",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Branch-Management",
      "$ git branch --move bad-branch-name corrected-branch-name\n$ git push --set-upstream origin corrected-branch-name\n$ git branch --all\n* corrected-branch-name\n  main\n  remotes/origin/bad-branch-name\n  remotes/origin/corrected-branch-name\n  remotes/origin/main\n$ git push origin --delete bad-branch-name\n"
    ],
    [
      "Commands",
      "config",
      "0",
      "No",
      "git config --global credential.helper cache",
      "Setup a credential cache to avoid retyping password.",
      "https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches\nhttps://git-scm.com/book/en/v2/ch00/_credential_caching"
    ],
    [
      "Commands",
      "checkout",
      "50",
      "No",
      "git checkout --track \u003cremote\u003e/\u003cbranch\u003e",
      "Setup a local tracking branch for the remote branch.",
      "https://git-scm.com/docs/git-checkout\nhttps://git-scm.com/book/en/v2/Git-Branching-Remote-Branches",
      "$ git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'"
    ],
    [
      "Commands",
      "branch",
      "11",
      "No",
      "git branch -vv",
      "List out local branches with more information.\n\nThis information includes what each branch is tracking and if your local branch is ahead, behind or both",
      "https://git-scm.com/docs/git-branch\nhttps://git-scm.com/book/en/v2/Git-Branching-Remote-Branches",
      "$ git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] Add forgotten brackets\n  master    1ae2a45 [origin/master] Deploy index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] This should do it\n  testing   5ea463a Try something new"
    ],
    [
      "Commands",
      "push",
      "40",
      "No",
      "git push \u003cremote\u003e --delete \u003cbranch\u003e",
      "Delete a remote branch.",
      "https://git-scm.com/docs/git-push\nhttps://git-scm.com/book/en/v2/Git-Branching-Remote-Branches",
      "$ git push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n - [deleted]         serverfix"
    ],
    [
      "Commands",
      "rebase",
      "0",
      "Yes",
      "git rebase \u003cbranch\u003e",
      "Take all the changes that were committed on the given branch and replay them on the current branch.",
      "https://git-scm.com/docs/git-rebase\nhttps://git-scm.com/book/en/v2/Git-Branching-Rebasing\nhttps://git-rebase.io/",
      "$ git checkout experiment\n$ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command"
    ],
    [
      "Workflows",
      "Branching",
      "40",
      "No",
      "\u003cBasic rebase\u003e",
      "Basic rebase.\n\n 1. Checkout the topic branch and rebase it onto the main branch\n 2. Return to the main branch and perform a fast-forward merge\n",
      "https://git-scm.com/book/en/v2/Git-Branching-Rebasing",
      "$ git checkout experiment\n$ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command\n$ git checkout master\n$ git merge experiment"
    ],
    [
      "Commands",
      "rebase",
      "10",
      "No",
      "git rebase --onto \u003cnewbase\u003e \u003cupstream\u003e \u003cbranch\u003e",
      "Perform a rebase from a given starting point.\n\nThis basically means: \"Take the `branch` branch, figure out the patches since it diverged from the `upstream` branch, and replay these patches in the `branch` branch as if it was based directly off the `newbase` branch instead\".",
      "https://git-scm.com/book/en/v2/Git-Branching-Rebasing\nhttps://git-rebase.io/",
      "$ git rebase --onto master server client"
    ],
    [
      "Commands",
      "rebase",
      "20",
      "No",
      "git rebase \u003cbasebranch\u003e \u003ctopicbranch\u003e",
      "Check out the topic branch and replay it onto the base branch.",
      "https://git-scm.com/book/en/v2/Git-Branching-Rebasing\nhttps://git-rebase.io/",
      "$ git rebase master server"
    ],
    [
      "Commands",
      "pull",
      "10",
      "No",
      "git pull --rebase",
      "Rrebase the current branch on top of the upstream branch after fetching.",
      "https://git-scm.com/docs/git-pull\nhttps://git-scm.com/book/en/v2/Git-Branching-Rebasing",
      "$ git pull --rebase"
    ],
    [
      "Commands",
      "config",
      "20",
      "No",
      "git config --global pull.rebase true",
      "Configure git pull to always use a rebase.",
      "https://git-scm.com/docs/git-pull\nhttps://git-scm.com/book/en/v2/Git-Branching-Rebasing"
    ],
    [
      "Commands",
      "diff",
      "20",
      "No",
      "git diff --check",
      "Warn if changes introduce conflict markers or whitespace errors.",
      "https://git-scm.com/docs/git-diff\nhttps://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project"
    ],
    [
      "Commands",
      "push",
      "50",
      "Yes",
      "git push -u \u003cremote\u003e \u003cbranch\u003e",
      "Push a local branch upstream.\n\nTriggers: `-u`, `--set-upstream`.\n\nThis configures the branches for easier pushing and pulling later.",
      "https://git-scm.com/docs/git-push\nhttps://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project",
      "$ git push -u origin featureA\n...\nTo jessica@githost:simplegit.git\n * [new branch]      featureA -\u003e featureA"
    ],
    [
      "Commands",
      "merge",
      "10",
      "No",
      "git merge --squash \u003cbranch\u003e",
      "Merge a branch into the current branch, squash all commits into one. \n\nDoes not auto-commit! You must commit manually.\n\nThis option takes all the work on the merged branch and squashes it into one changeset producing the repository state as if a real merge happened, without actually making a merge commit. This means your future commit will have one parent only and allows you to introduce all the changes from another branch and then make more changes before recording the new commit.",
      "https://git-scm.com/docs/git-merge\nhttps://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project",
      "$ git checkout -b featureBv2 origin/master\n$ git merge --squash featureB\n  ... change implementation ...\n$ git commit\n$ git push myfork featureBv2"
    ],
    [
      "Commands",
      "apply",
      "0",
      "No",
      "git apply \u003cpatchfile\u003e",
      "Apply a patch file.\n\nIf you received the patch from someone who generated it with `git diff` or some variation of the Unix `diff` command (which is not recommended; use `format-patch` instead), you can apply it with the `git apply` command.",
      "https://git-scm.com/docs/git-apply\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git apply /tmp/patch-ruby-client.patch\n"
    ],
    [
      "Commands",
      "apply",
      "10",
      "No",
      "git apply --check \u003cpatchfile\u003e",
      "Check if a patch applies cleanly before you try actually applying it.\n\nIf there is no output, then the patch should apply cleanly. This command also exits with a non-zero status if the check fails, so you can use it in scripts if you want.",
      "https://git-scm.com/docs/git-apply\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git apply --check 0001-see-if-this-helps-the-gem.patch\nerror: patch failed: ticgit.gemspec:1\nerror: ticgit.gemspec: patch does not apply"
    ],
    [
      "Commands",
      "am",
      "0",
      "No",
      "git am \u003cpatchfile\u003e",
      "Apply a patch file generated by format-patch.",
      "https://git-scm.com/docs/git-am\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git am 0001-limit-log-function.patch\nApplying: Add limit to log function"
    ],
    [
      "Commands",
      "format-patch",
      "0",
      "No",
      "git format-patch",
      "Prepare patches for e-mail submission.\n",
      "https://git-scm.com/docs/git-format-patch\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project"
    ],
    [
      "Workflows",
      "Patches",
      "0",
      "No",
      "\u003cApply a patch with conflicts\u003e",
      "Apply a patch with conflicts\n 1. Attempt to apply the patch\n 2. Observe conflicts\n 3. Resolve conflicts\n 4. Add the conflicted file(s) back\n 5. Resume applying the patch\n",
      "https://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git am 0001-see-if-this-helps-the-gem.patch\nApplying: See if this helps the gem\nerror: patch failed: ticgit.gemspec:1\nerror: ticgit.gemspec: patch does not apply\nPatch failed at 0001.\nWhen you have resolved this problem run \"git am --resolved\".\nIf you would prefer to skip this patch, instead run \"git am --skip\".\nTo restore the original branch and stop patching run \"git am --abort\".\n\n$ (fix the file)\n$ git add ticgit.gemspec\n$ git am --resolved\nApplying: See if this helps the gem"
    ],
    [
      "Commands",
      "log",
      "140",
      "No",
      "git log \u003cbranch1\u003e --not \u003cbranch2\u003e",
      "See all the commits in branch1 which aren't in branch2.\n\nThis syntax allows specify more than two references in your query. For instance, if you want to see all commits that are reachable from `refA` or `refB` but not from `refC`:\n`git log refA refB --not refC`.\n\nThe following three commands are equivalent:\n\n * `$ git log refA..refB`\n * `$ git log ^refA refB`\n * `$ git log refB --not refA`",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project\nhttps://git-scm.com/book/en/v2/Git-Tools-Revision-Selection",
      "$ git log contrib --not master\ncommit 5b6235bd297351589efc4d73316f0a68d484f118\nAuthor: Scott Chacon \u003cschacon@gmail.com\u003e\nDate:   Fri Oct 24 09:53:59 2008 -0700\n\n    See if this helps the gem\n\ncommit 7482e0d16d04bea79d0dba8988cc78df655f16a0\nAuthor: Scott Chacon \u003cschacon@gmail.com\u003e\nDate:   Mon Oct 22 19:38:36 2008 -0700\n\n    Update gemspec to hopefully work better\n\n$ git log refA refB --not refC"
    ],
    [
      "Commands",
      "log",
      "150",
      "No",
      "git log \u003cbranch1\u003e..\u003cbranch2\u003e",
      "See all the commits in branch2 which aren't in branch1.\n\nYou can also leave off one side of the syntax to have Git assume `HEAD`.\n\nThe following three commands are equivalent:\n\n * `$ git log refA..refB`\n * `$ git log ^refA refB`\n * `$ git log refB --not refA`",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project\nhttps://git-scm.com/book/en/v2/Git-Tools-Revision-Selection",
      "$ git log --no-merges issue54..origin/master\ncommit 738ee872852dfaa9d6634e0dea7a324040193016\nAuthor: John Smith \u003cjsmith@example.com\u003e\nDate:   Fri May 29 16:01:27 2009 -0700\n\n   Remove invalid default value\n\n$ git log origin/master..HEAD"
    ],
    [
      "Commands",
      "merge-base",
      "0",
      "No",
      "git merge-base \u003cbranch1\u003e \u003cbranch2\u003e",
      "Find as good common ancestors as possible for a merge.",
      "https://git-scm.com/docs/git-merge-base\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git merge-base contrib master\n36c7dba2c95e6bbb78dfa822519ecfec6e1ca649"
    ],
    [
      "Commands",
      "diff",
      "160",
      "Yes",
      "git diff \u003cbranch1\u003e...\u003cbranch2\u003e\n",
      "See only the work that branch2 has introduced since its common ancestor with branch1.\n\nIn other words, this specifies all the commits that are reachable by either of two references but not by both of them.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project\nhttps://git-scm.com/book/en/v2/Git-Tools-Revision-Selection",
      "$ git diff master...contrib\n"
    ],
    [
      "Commands",
      "cherry-pick",
      "0",
      "Yes",
      "git cherry-pick \u003ccommit\u003e",
      "Apply the changes introduced by some existing commits.\n\nThis pulls the same change introduced in `\u003ccommit\u003e`, but you get a new commit SHA-1 value, because the date applied is different.\n\nAdd `-x` to include a comment listing the original commit ID.",
      "https://git-scm.com/docs/git-cherry-pick\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git cherry-pick e43a6\nFinished one cherry-pick.\n[master]: created a0a41a9: \"More friendly message when locking the index fails.\"\n 3 files changed, 17 insertions(+), 3 deletions(-)"
    ],
    [
      "Commands",
      "config",
      "30",
      "No",
      "git config --global rerere.enabled true",
      "A way of shortcutting manual conflict resolution.\n\nRerere stands for “reuse recorded resolution”. When `rerere` is enabled, Git will keep a set of pre- and post-images from successful merges, and if it notices that there’s a conflict that looks exactly like one you’ve already fixed, it’ll just use the fix from last time, without bothering you with it.",
      "https://git-scm.com/docs/git-rerere\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git config --global rerere.enabled true\n"
    ],
    [
      "Commands",
      "rerere",
      "0",
      "No",
      "git rerere",
      "Check the DB of resolutions and try to find a match with any current merge conflicts and resolve them.",
      "https://git-scm.com/docs/git-rerere\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project"
    ],
    [
      "Commands",
      "describe",
      "0",
      "No",
      "git describe \u003cbranch\u003e",
      "Give an object a human readable name based on an available ref.\n\nGit generates a string consisting of the name of the most recent tag earlier than that commit, followed by the number of commits since that tag, followed finally by a partial SHA-1 value of the commit being described (prefixed with the letter \"g\" meaning Git).\n\nBy default, the `git describe` command requires annotated tags (tags created with the `-a` or `-s` flag); if you want to take advantage of lightweight (non-annotated) tags as well, add the `--tags` option to the command.",
      "https://git-scm.com/docs/git-describe\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git describe master\nv1.6.2-rc1-20-g8c5b85c"
    ],
    [
      "Commands",
      "archive",
      "0",
      "No",
      "git archive \u003cbranch\u003e",
      "Create an archive of the latest snapshot of the branch.\n",
      "https://git-scm.com/docs/git-archive\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git archive master --prefix='project/' | gzip \u003e `git describe master`.tar.gz\n$ ls *.tar.gz\nv1.6.2-rc1-20-g8c5b85c.tar.gz\n\n$ git archive master --prefix='project/' --format=zip \u003e `git describe master`.zip"
    ],
    [
      "Commands",
      "shortlog",
      "0",
      "No",
      "git shortlog",
      "Summarize git log output.",
      "https://git-scm.com/docs/git-shortlog\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git shortlog --no-merges master --not v1.0.1\nChris Wanstrath (6):\n      Add support for annotated tags to Grit::Tag\n      Add packed-refs annotated tag support.\n      Add Grit::Commit#to_patch\n      Update version and History.txt\n      Remove stray `puts`\n      Make ls_tree ignore nils\n\nTom Preston-Werner (4):\n      fix dates in history\n      dynamic version method\n      Version bump to 1.0.2\n      Regenerated gemspec for version 1.0.2"
    ],
    [
      "Commands",
      "log",
      "141",
      "No",
      "git log \u003cbranch\u003e --not \u003ctag\u003e",
      "List all commits on the branch since the given tag.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project",
      "$ git log master --not v1.0.1\n"
    ],
    [
      "Workflows",
      "Branching",
      "50",
      "No",
      "\u003cGitHub Workflow\u003e",
      "Github workflow.\n\nSee link.",
      "https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project"
    ],
    [
      "Commands",
      "show",
      "10",
      "Yes",
      "git show \u003ccommit\u003e",
      "Show details about a given commit.\n\nFor details about the parent of a commit, place a `^` at the end of the commit ID.\n\nYou can also specify a number after the `^` to identify which parent you want. This syntax is useful only for merge commits, which have more than one parent — the first parent of a merge commit is from the branch you were on when you merged (frequently `master`), while the second parent of a merge commit is from the branch that was merged (say, `topic`).\n\nThe other main ancestry specification is the `~` (tilde). This also refers to the first parent, so `HEAD~` and `HEAD^` are equivalent. The difference becomes apparent when you specify a number. `HEAD~2` means “the first parent of the first parent,” or “the grandparent” — it traverses the first parents the number of times you specify.",
      "https://git-scm.com/docs/git-show\nhttps://git-scm.com/book/en/v2/Git-Tools-Revision-Selection",
      "$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b\n$ git show 1c002dd4b536e7479f\n$ git show 1c002d\n\n$ git show HEAD^\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nMerge: 1c002dd... 35cfb2b...\nAuthor: Scott Chacon \u003cschacon@gmail.com\u003e\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\n$ git show d921970^\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nAuthor: Scott Chacon \u003cschacon@gmail.com\u003e\nDate:   Thu Dec 11 14:58:32 2008 -0800\n\n    Add some blame and merge stuff\n\n$ git show d921970^2\ncommit 35cfb2b795a55793d7cc56a6cc2060b4bb732548\nAuthor: Paul Hedderly \u003cpaul+git@mjr.org\u003e\nDate:   Wed Dec 10 22:22:03 2008 +0000\n\n    Some rdoc changes\n\n$ git show HEAD~3\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner \u003ctom@mojombo.com\u003e\nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    Ignore *.gem\n\n$ git show HEAD~~~\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner \u003ctom@mojombo.com\u003e\nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    Ignore *.gem"
    ],
    [
      "Commands",
      "log",
      "180",
      "No",
      "git log --abbrev-commit",
      "Show short commit IDs for commits.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Tools-Revision-Selection",
      "$ git log --abbrev-commit --pretty=oneline\nca82a6d Change the version number\n085bb3b Remove unnecessary test code\na11bef0 Initial commit"
    ],
    [
      "Commands",
      "rev-parse",
      "0",
      "No",
      "git rev-parse \u003cbranch\u003e",
      "Show latest commit ID for given branch.",
      "https://git-scm.com/docs/git-rev-parse\nhttps://git-scm.com/book/en/v2/Git-Tools-Revision-Selection",
      "$ git rev-parse topic1\nca82a6dff817ec66f44342007202690a93763949"
    ],
    [
      "Commands",
      "reflog",
      "0",
      "Yes",
      "git reflog",
      "Show a log of where the HEAD and branch references have been recently.\n\nIt’s important to note that `reflog` information is strictly local — it’s a log only of what you’ve done in your repository. The references won’t be the same on someone else’s copy of the repository; also, right after you initially clone a repository, you’ll have an empty reflog, as no activity has occurred yet in your repository.",
      "https://git-scm.com/docs/git-reflog\nhttps://git-scm.com/book/en/v2/Git-Tools-Revision-Selection",
      "$ git reflog\n734713b HEAD@{0}: commit: Fix refs handling, add gc auto, update tests\nd921970 HEAD@{1}: merge phedders/rdocs: Merge made by the 'recursive' strategy.\n1c002dd HEAD@{2}: commit: Add some blame and merge stuff\n1c36188 HEAD@{3}: rebase -i (squash): updating HEAD\n95df984 HEAD@{4}: commit: # This is a combination of two commits.\n1c36188 HEAD@{5}: rebase -i (squash): updating HEAD\n7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD"
    ],
    [
      "Commands",
      "log",
      "190",
      "No",
      "git log -g",
      "View reflog information formatted like the git log output.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Tools-Revision-Selection",
      "$ git log -g master\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nReflog: master@{0} (Scott Chacon \u003cschacon@gmail.com\u003e)\nReflog message: commit: Fix refs handling, add gc auto, update tests\nAuthor: Scott Chacon \u003cschacon@gmail.com\u003e\nDate:   Fri Jan 2 18:32:33 2009 -0800\n\n    Fix refs handling, add gc auto, update tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nReflog: master@{1} (Scott Chacon \u003cschacon@gmail.com\u003e)\nReflog message: merge phedders/rdocs: Merge made by recursive.\nAuthor: Scott Chacon \u003cschacon@gmail.com\u003e\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'"
    ],
    [
      "Commands",
      "log",
      "200",
      "No",
      "git log \u003c...\u003e --left-right",
      "Show which side of the range each commit is in.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Tools-Revision-Selection",
      "$ git log --left-right master...experiment\n\u003c F\n\u003c E\n\u003e D\n\u003e C"
    ],
    [
      "Commands",
      "add",
      "10",
      "No",
      "git add -i",
      "Add modified contents in the working tree interactively.\n\nTriggers: `-i`, `--interactive`.",
      "https://git-scm.com/docs/git-add\nhttps://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging",
      "$ git add -i\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now\u003e"
    ],
    [
      "Commands",
      "add",
      "20",
      "Yes",
      "git add -p \u003cfile\u003e",
      "Interactively choose hunks of patch between the index and the work tree and add them to the index. \n\nTriggers: `-p`, `--patch`.\n\nIf you only want to add part of a hunk but git won't suggest `s` (split), choose `e` (manually edit the current hunk) and delete the lines you don't want to currently add to the staging area.",
      "https://git-scm.com/docs/git-add\nhttps://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging\nhttps://rietta.com/blog/git-patch-manual-split/"
    ],
    [
      "Commands",
      "reset",
      "100",
      "No",
      "git reset -p \u003cfile\u003e",
      "Partially reset files.\n\nTriggers: `-p`, `--patch`.",
      "https://git-scm.com/docs/git-reset\nhttps://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging"
    ],
    [
      "Commands",
      "checkout",
      "60",
      "No",
      "git checkout -p \u003cfile\u003e",
      "Partially checkout files.\n\nTriggers: `-p`, `--patch`.",
      "https://git-scm.com/docs/git-checkout\nhttps://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging"
    ],
    [
      "Commands",
      "stash",
      "20",
      "No",
      "git stash push -p",
      "Partially stash changes in files.\n\nTriggers: `-p`, `--patch`.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git stash --patch\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex 66d332e..8bb5674 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -16,6 +16,10 @@ class SimpleGit\n         return `#{git_cmd} 2\u003e&1`.chomp\n       end\n     end\n+\n+    def show(treeish = 'master')\n+      command(\"git show #{treeish}\")\n+    end\n\n end\n test\nStash this hunk [y,n,q,a,d,/,e,?]? y\n\nSaved working directory and index state WIP on master: 1b65b17 added the index file"
    ],
    [
      "Commands",
      "stash",
      "0",
      "No",
      "git stash push",
      "Stash the changes in a dirty working directory away.\n\nFor quickly making a snapshot, you can omit `push`. In this mode, non-option arguments are not allowed.\n\nBy default, `git stash` will stash only modified and staged tracked files.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git status\nChanges to be committed:\n  (use \"git reset HEAD \u003cfile\u003e...\" to unstage)\n\n\tmodified:   index.html\n\nChanges not staged for commit:\n  (use \"git add \u003cfile\u003e...\" to update what will be committed)\n  (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\n\n\tmodified:   lib/simplegit.rb\n\n$ git stash\nSaved working directory and index state \\\n  \"WIP on master: 049d078 Create index file\"\nHEAD is now at 049d078 Create index file\n(To restore them type \"git stash apply\")\n\n$ git status\n# On branch master\nnothing to commit, working directory clean"
    ],
    [
      "Commands",
      "stash",
      "30",
      "Yes",
      "git stash list",
      "List available stashes.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git stash list\nstash@{0}: WIP on master: 049d078 Create index file\nstash@{1}: WIP on master: c264051 Revert \"Add file_size\"\nstash@{2}: WIP on master: 21d80a5 Add number to log"
    ],
    [
      "Commands",
      "stash",
      "40",
      "Yes",
      "git stash apply",
      "Apply most recent stash to current branch.\n\nHaving a clean working directory and applying it on the same branch aren’t necessary to successfully apply a stash. You can save a stash on one branch, switch to another branch later, and try to reapply the changes. You can also have modified and uncommitted files in your working directory when you apply a stash — Git gives you merge conflicts if anything no longer applies cleanly.\n\nNote that after running this, the changes to your files are reapplied, but the files you staged before aren’t restaged. To restage files, run with `--index`.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git stash apply\nOn branch master\nChanges not staged for commit:\n  (use \"git add \u003cfile\u003e...\" to update what will be committed)\n  (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\n\n\tmodified:   index.html\n\tmodified:   lib/simplegit.rb\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    ],
    [
      "Commands",
      "stash",
      "60",
      "No",
      "git stash apply \u003cname\u003e",
      "Apply given stash to current branch.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git stash apply stash@{2}"
    ],
    [
      "Commands",
      "stash",
      "50",
      "No",
      "git stash apply --index",
      "Apply the most recent stash to the current branch and try to restage the files.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git stash apply --index\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD \u003cfile\u003e...\" to unstage)\n\n\tmodified:   index.html\n\nChanges not staged for commit:\n  (use \"git add \u003cfile\u003e...\" to update what will be committed)\n  (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\n\n\tmodified:   lib/simplegit.rb"
    ],
    [
      "Commands",
      "stash",
      "70",
      "No",
      "git stash drop \u003cname\u003e",
      "Delete the given stash.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git stash list\nstash@{0}: WIP on master: 049d078 Create index file\nstash@{1}: WIP on master: c264051 Revert \"Add file_size\"\nstash@{2}: WIP on master: 21d80a5 Add number to log\n$ git stash drop stash@{0}\nDropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)"
    ],
    [
      "Commands",
      "stash",
      "10",
      "No",
      "git stash push --keep-index",
      "Stash the changes while keeping the working directory modified.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git status -s\nM  index.html\n M lib/simplegit.rb\n\n$ git stash --keep-index\nSaved working directory and index state WIP on master: 1b65b17 added the index file\nHEAD is now at 1b65b17 added the index file\n\n$ git status -s\nM  index.html"
    ],
    [
      "Commands",
      "stash",
      "11",
      "No",
      "git stash push --include-untracked",
      "Stash changes, include untracked files in the stash being created.\n\nTriggers: `-u`, `--include-untracked`.\n\nIncluding untracked files in the stash will still not include explicitly ignored files. To additionally include ignored files, use `--all` (or just `-a`).",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git status -s\nM  index.html\n M lib/simplegit.rb\n?? new-file.txt\n\n$ git stash -u\nSaved working directory and index state WIP on master: 1b65b17 added the index file\nHEAD is now at 1b65b17 added the index file\n\n$ git status -s\n$"
    ],
    [
      "Commands",
      "stash",
      "80",
      "No",
      "git stash branch \u003cnew branchname\u003e",
      "Create a branch from a stash.\n\nThis creates a new branch for you with your selected branch name, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git stash branch testchanges\nM\tindex.html\nM\tlib/simplegit.rb\nSwitched to a new branch 'testchanges'\nOn branch testchanges\nChanges to be committed:\n  (use \"git reset HEAD \u003cfile\u003e...\" to unstage)\n\n\tmodified:   index.html\n\nChanges not staged for commit:\n  (use \"git add \u003cfile\u003e...\" to update what will be committed)\n  (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\n\n\tmodified:   lib/simplegit.rb\n\nDropped refs/stash@{0} (29d385a81d163dfd45a452a2ce816487a6b8b014)"
    ],
    [
      "Commands",
      "clean",
      "0",
      "No",
      "git clean",
      "Remove untracked files from the working tree.\n\nBy default, the `git clean` command will only remove untracked files that are not ignored.\n\nAny file that matches a pattern in your `.gitignore` or other ignore files will not be removed.",
      "https://git-scm.com/docs/git-clean\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning"
    ],
    [
      "Commands",
      "stash",
      "25",
      "No",
      "git stash push --all",
      "Stash all files and remove them from the working directory.\n\nBrings the working directory back to a clean state.",
      "https://git-scm.com/docs/git-stash\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning"
    ],
    [
      "Commands",
      "clean",
      "10",
      "No",
      "git clean -d",
      "Remove all the untracked files in your working directory.\n\nThis removes any files and also any subdirectories that become empty as a result.\n\nAdd `-f` (which means 'force') if the Git configuration variable `clean.requireForce` is not explicitly set to false.",
      "https://git-scm.com/docs/git-clean\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning"
    ],
    [
      "Commands",
      "clean",
      "20",
      "No",
      "git clean -d --dry-run",
      "List the files that git would have removed during a clean request.\n\nTriggers: `-n`, `--dry-run`.",
      "https://git-scm.com/docs/git-clean\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git clean -d -n\nWould remove test.o\nWould remove tmp/"
    ],
    [
      "Commands",
      "clean",
      "30",
      "No",
      "git clean -d -x",
      "Remove untracked files (including ignored files) from the working tree.",
      "https://git-scm.com/docs/git-clean\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git status -s\n M lib/simplegit.rb\n?? build.TMP\n?? tmp/\n\n$ git clean -n -d\nWould remove build.TMP\nWould remove tmp/\n\n$ git clean -n -d -x\nWould remove build.TMP\nWould remove test.o\nWould remove tmp/"
    ],
    [
      "Commands",
      "clean",
      "40",
      "No",
      "git clean -i",
      "Run the clean command in interactive mode.\n\nThis allows to step through each file individually or specify patterns for deletion interactively.",
      "https://git-scm.com/docs/git-clean\nhttps://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning",
      "$ git clean -x -i\nWould remove the following items:\n  build.TMP  test.o\n*** Commands ***\n    1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit\n    6: help\nWhat now\u003e"
    ],
    [
      "Commands",
      "grep",
      "0",
      "No",
      "git grep -n \u003cterm\u003e",
      "Search through the files in your working directory for a given term, show line numbers.\n\nTriggers: `-n`, `--line-number`.",
      "https://git-scm.com/docs/git-grep\nhttps://git-scm.com/book/en/v2/Git-Tools-Searching",
      "$ git grep -n gmtime_r\ncompat/gmtime.c:3:#undef gmtime_r\ncompat/gmtime.c:8:      return git_gmtime_r(timep, &result);\ncompat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)\ncompat/gmtime.c:16:     ret = gmtime_r(timep, result);\ncompat/mingw.c:826:struct tm *gmtime_r(const time_t *timep, struct tm *result)\ncompat/mingw.h:206:struct tm *gmtime_r(const time_t *timep, struct tm *result);\ndate.c:482:             if (gmtime_r(&now, &now_tm))\ndate.c:545:             if (gmtime_r(&time, tm)) {\ndate.c:758:             /* gmtime_r() in match_digit() may have clobbered it */\ngit-compat-util.h:1138:struct tm *git_gmtime_r(const time_t *, struct tm *);\ngit-compat-util.h:1140:#define gmtime_r git_gmtime_r"
    ],
    [
      "Commands",
      "grep",
      "10",
      "No",
      "git grep -c \u003cterm\u003e",
      "Search through the files in your working directory for a given term, count matches.\n\nTriggers: `-c`, `--count`.",
      "https://git-scm.com/docs/git-grep\nhttps://git-scm.com/book/en/v2/Git-Tools-Searching",
      "$ git grep --count gmtime_r\ncompat/gmtime.c:4\ncompat/mingw.c:1\ncompat/mingw.h:1\ndate.c:3\ngit-compat-util.h:2"
    ],
    [
      "Commands",
      "grep",
      "20",
      "No",
      "git grep -p \u003cterm\u003e",
      "Search through the files in your working directory for a given term, show context.\n\nTriggers: `-p`, `--show-function`.\n\nThis displays the enclosing method or function for each matching string.",
      "https://git-scm.com/docs/git-grep\nhttps://git-scm.com/book/en/v2/Git-Tools-Searching",
      "$ git grep -p gmtime_r *.c\ndate.c=static int match_multi_number(timestamp_t num, char c, const char *date,\ndate.c:         if (gmtime_r(&now, &now_tm))\ndate.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)\ndate.c:         if (gmtime_r(&time, tm)) {\ndate.c=int parse_date_basic(const char *date, timestamp_t *timestamp, int *offset)\ndate.c:         /* gmtime_r() in match_digit() may have clobbered it */"
    ],
    [
      "Commands",
      "grep",
      "30",
      "No",
      "git grep --break --heading \u003cterm\u003e",
      "Search for a given term, split up the output into a more readable format.",
      "https://git-scm.com/docs/git-grep\nhttps://git-scm.com/book/en/v2/Git-Tools-Searching",
      "$ git grep --break --heading \\\n    -n -e '#define' --and \\( -e LINK -e BUF_MAX \\) v1.8.0\nv1.8.0:builtin/index-pack.c\n62:#define FLAG_LINK (1u\u003c\u003c20)\n\nv1.8.0:cache.h\n73:#define S_IFGITLINK  0160000\n74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)\n\nv1.8.0:environment.c\n54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS\n\nv1.8.0:strbuf.c\n326:#define STRBUF_MAXLINK (2*PATH_MAX)\n\nv1.8.0:symlinks.c\n53:#define FL_SYMLINK  (1 \u003c\u003c 2)\n\nv1.8.0:zlib.c\n30:/* #define ZLIB_BUF_MAX ((uInt)-1) */\n31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */"
    ],
    [
      "Commands",
      "grep",
      "40",
      "No",
      "git grep -e \u003cregexp1\u003e --or -e \u003cregexp2\u003e",
      "Search working tree for lines of text matching regular expression regexp1 or regexp2.",
      "https://git-scm.com/docs/git-grep\nhttps://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history"
    ],
    [
      "Commands",
      "grep",
      "50",
      "No",
      "git grep -l -e \u003cregexp1\u003e --and -e \u003cregexp2\u003e",
      "Search working tree for lines of text matching regular expression regexp1 and regexp2, reporting file paths only.",
      "https://git-scm.com/docs/git-grep\nhttps://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history"
    ],
    [
      "Commands",
      "grep",
      "60",
      "No",
      "git grep -l --all-match -e \u003cregexp1\u003e -e \u003cregexp2\u003e",
      "Search working tree for files that have lines of text matching regular expression regexp1 and lines of text matching regular expression regexp2.",
      "https://git-scm.com/docs/git-grep\nhttps://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history"
    ],
    [
      "Commands",
      "grep",
      "70",
      "No",
      "git grep \u003cregexp\u003e $(git rev-list --all)",
      "Search all revisions for text matching regular expression regexp.",
      "https://git-scm.com/docs/git-grep\nhttps://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history"
    ],
    [
      "Commands",
      "grep",
      "80",
      "No",
      "git grep \u003cregexp\u003e $(git rev-list \u003crev1\u003e..\u003crev2\u003e)",
      "Search all revisions between rev1 and rev2 for text matching regular expression regexp.",
      "https://git-scm.com/docs/git-grep\nhttps://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history"
    ],
    [
      "Commands",
      "log",
      "210",
      "No",
      "git log -L \u003cexpression\u003e",
      "Show the history of a function or line of code in the codebase.\n\nThe expression can be of the form `-L\u003cstart\u003e,\u003cend\u003e:\u003cfile\u003e` or `-L:\u003cfuncname\u003e:\u003cfile\u003e`.\n\n`\u003cstart\u003e` and `\u003cend\u003e` can be a line number, a regular expression or an offset.\n\nThe `funcname` syntax will try to figure out what the bounds of that function are and then look through the history and show us every change that was made to the function as a series of patches back to when the function was first created.",
      "https://git-scm.com/docs/git-log\nhttps://git-scm.com/book/en/v2/Git-Tools-Searching",
      "$ git log -L :git_deflate_bound:zlib.c\ncommit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca\nAuthor: Junio C Hamano \u003cgitster@pobox.com\u003e\nDate:   Fri Jun 10 11:52:15 2011 -0700\n\n    zlib: zlib can only process 4GB at a time\n\ndiff --git a/zlib.c b/zlib.c\n--- a/zlib.c\n+++ b/zlib.c\n@@ -85,5 +130,5 @@\n-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)\n+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)\n {\n-       return deflateBound(strm, size);\n+       return deflateBound(&strm-\u003ez, size);\n }\n\n\ncommit 225a6f1068f71723a910e8565db4e252b3ca21fa\nAuthor: Junio C Hamano \u003cgitster@pobox.com\u003e\nDate:   Fri Jun 10 11:18:17 2011 -0700\n\n    zlib: wrap deflateBound() too\n\ndiff --git a/zlib.c b/zlib.c\n--- a/zlib.c\n+++ b/zlib.c\n@@ -81,0 +85,5 @@\n+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)\n+{\n+       return deflateBound(strm, size);\n+}\n+"
    ],
    [
      "Commands",
      "rebase",
      "30",
      "No",
      "git rebase -i \u003cparent of last commit to edit\u003e",
      "Rewrite history of last n commits via interactive rebase.\n\nWith the interactive rebase tool, you can then stop after each commit you want to modify and change the message, add files, or do whatever you wish.\n\nThis is a rebasing command — every commit in the range \u003cparent of last commit to edit\u003e..HEAD with a changed message and all of its descendants will be rewritten. Don’t include any commit you’ve already pushed to a central server — doing so will confuse other developers by providing an alternate version of the same change.\n\n The interactive rebase gives you a script that it’s going to run. It will start at the commit you specify on the command line and replay the changes introduced in each of these commits from top to bottom. It lists the oldest at the top, rather than the newest, because that’s the first one it will replay. You need to edit the script so that it stops at the commit you want to edit. To do so, change the word “pick” to the word “edit” for each of the commits you want the script to stop after. When you save and exit the editor, Git rewinds you back to the last commit in that list and drops you on the command line with further instructions. Alternatively you can squash, reorder or delete commits.\n\nIf you finish a rebase and decide it’s not what you want, you can use `git reflog` to recover an earlier version of your branch.",
      "https://git-scm.com/docs/git-rebase\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\nhttps://git-rebase.io/\nhttps://github.blog/2022-06-30-write-better-commits-build-better-projects/\nhttps://algoritmim.co.il/just-code/make-your-commit-the-best-with-interactive-rebase/",
      "$ # Edit last three commits\n$ git rebase -i HEAD~3 # or HEAD~2^\npick f7f3f6d Change my name a bit\npick 310154e Update README formatting and add blame\npick a5f4a0d Add cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick \u003ccommit\u003e = use commit\n# r, reword \u003ccommit\u003e = use commit, but edit the commit message\n# e, edit \u003ccommit\u003e = use commit, but stop for amending\n# s, squash \u003ccommit\u003e = use commit, but meld into previous commit\n# f, fixup \u003ccommit\u003e = like \"squash\", but discard this commit's log message\n# x, exec \u003ccommand\u003e = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop \u003ccommit\u003e = remove commit\n# l, label \u003clabel\u003e = label current HEAD with a name\n# t, reset \u003clabel\u003e = reset HEAD to a label\n# m, merge [-C \u003ccommit\u003e | -c \u003ccommit\u003e] \u003clabel\u003e [# \u003coneline\u003e]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c \u003ccommit\u003e to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out"
    ],
    [
      "Workflows",
      "Rebasing",
      "0",
      "No",
      "\u003cChanging Multiple Commit Messages\u003e",
      "Changing Multiple Commit Messages.\n\n 1. Run the interactive rebase command\n 2. In the editor that pops up, select commits to edit by marking as \"edit\" instead of \"pick\"\n 3. Save and exit\n 4. For each commit selected, git will show a command line and offer to amend the commit\n 5. After making the change, proceed with a `continue` command",
      "https://git-scm.com/docs/git-rebase\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\nhttps://git-rebase.io/",
      "$ git rebase -i HEAD~3\npick f7f3f6d Change my name a bit\npick 310154e Update README formatting and add blame\npick a5f4a0d Add cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick \u003ccommit\u003e = use commit\n# r, reword \u003ccommit\u003e = use commit, but edit the commit message\n# e, edit \u003ccommit\u003e = use commit, but stop for amending\n# s, squash \u003ccommit\u003e = use commit, but meld into previous commit\n# f, fixup \u003ccommit\u003e = like \"squash\", but discard this commit's log message\n# x, exec \u003ccommand\u003e = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop \u003ccommit\u003e = remove commit\n# l, label \u003clabel\u003e = label current HEAD with a name\n# t, reset \u003clabel\u003e = reset HEAD to a label\n# m, merge [-C \u003ccommit\u003e | -c \u003ccommit\u003e] \u003clabel\u003e [# \u003coneline\u003e]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c \u003ccommit\u003e to reword the commit message.\n#\n\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n--\u003e [Edit the file and mark commits to edit]\nedit f7f3f6d Change my name a bit\npick 310154e Update README formatting and add blame\npick a5f4a0d Add cat-file\n\n--\u003e [Save and exit, to return to command line]\n\n$ git rebase -i HEAD~3\nStopped at f7f3f6d... Change my name a bit\nYou can amend the commit now, with\n\n       git commit --amend\n\nOnce you're satisfied with your changes, run\n\n       git rebase --continue\n\n$ git commit --amend # Use to amend the commit message\n\n$ git rebase --continue"
    ],
    [
      "Workflows",
      "Rebasing",
      "10",
      "No",
      "\u003cReordering Commits\u003e",
      "Reordering Commits.\n\nGit rewinds your branch to the parent of these commits, then starts re-applying them according to the new order.",
      "https://git-scm.com/docs/git-rebase\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\nhttps://git-rebase.io/",
      "$ git rebase -i HEAD~3\npick f7f3f6d Change my name a bit\npick 310154e Update README formatting and add blame\npick a5f4a0d Add cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick \u003ccommit\u003e = use commit\n# r, reword \u003ccommit\u003e = use commit, but edit the commit message\n# e, edit \u003ccommit\u003e = use commit, but stop for amending\n# s, squash \u003ccommit\u003e = use commit, but meld into previous commit\n# f, fixup \u003ccommit\u003e = like \"squash\", but discard this commit's log message\n# x, exec \u003ccommand\u003e = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop \u003ccommit\u003e = remove commit\n# l, label \u003clabel\u003e = label current HEAD with a name\n# t, reset \u003clabel\u003e = reset HEAD to a label\n# m, merge [-C \u003ccommit\u003e | -c \u003ccommit\u003e] \u003clabel\u003e [# \u003coneline\u003e]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c \u003ccommit\u003e to reword the commit message.\n#\n\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n--\u003e [Edit the file and change commit order]\npick 310154e Update README formatting and add blame\npick f7f3f6d Change my name a bit\npick a5f4a0d Add cat-file\n\n--\u003e [Save and exit]\n# Git will first apply 310154e, then f7f3f6d, then a5f4a0d "
    ],
    [
      "Workflows",
      "Rebasing",
      "20",
      "No",
      "\u003cRemoving Commits\u003e",
      "Removing commits.\n\nThis is done by either deleting the commit line from the interactive rebase script or changing the action to \"drop\".\n\nBecause of the way Git builds commit objects, deleting or altering a commit will cause the rewriting of all the commits that follow it. The further back in your repo’s history you go, the more commits will need to be recreated. This can cause lots of merge conflicts if you have many commits later in the sequence that depend on the one you just deleted.",
      "https://git-scm.com/docs/git-rebase\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\nhttps://git-rebase.io/",
      "$ git rebase -i HEAD~3\npick f7f3f6d Change my name a bit\npick 310154e Update README formatting and add blame\npick a5f4a0d Add cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick \u003ccommit\u003e = use commit\n# r, reword \u003ccommit\u003e = use commit, but edit the commit message\n# e, edit \u003ccommit\u003e = use commit, but stop for amending\n# s, squash \u003ccommit\u003e = use commit, but meld into previous commit\n# f, fixup \u003ccommit\u003e = like \"squash\", but discard this commit's log message\n# x, exec \u003ccommand\u003e = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop \u003ccommit\u003e = remove commit\n# l, label \u003clabel\u003e = label current HEAD with a name\n# t, reset \u003clabel\u003e = reset HEAD to a label\n# m, merge [-C \u003ccommit\u003e | -c \u003ccommit\u003e] \u003clabel\u003e [# \u003coneline\u003e]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c \u003ccommit\u003e to reword the commit message.\n#\n\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n--\u003e [Edit the file and delete the entries for the commits to be removed]\npick 310154e Update README formatting and add blame\npick a5f4a0d Add cat-file\n\n--\u003e [Save and exit]"
    ],
    [
      "Workflows",
      "Rebasing",
      "30",
      "No",
      "\u003cSquashing Commits\u003e",
      "Squashing commits.\n\nThis takes a series of commits and squashes them down into a single commit with the interactive rebasing tool.\n\nGit applies all the squashed changes and the change directly before it and makes you merge the commit messages together.",
      "https://git-scm.com/docs/git-rebase\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\nhttps://git-rebase.io/",
      "$ git rebase -i HEAD~3\npick f7f3f6d Change my name a bit\npick 310154e Update README formatting and add blame\npick a5f4a0d Add cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick \u003ccommit\u003e = use commit\n# r, reword \u003ccommit\u003e = use commit, but edit the commit message\n# e, edit \u003ccommit\u003e = use commit, but stop for amending\n# s, squash \u003ccommit\u003e = use commit, but meld into previous commit\n# f, fixup \u003ccommit\u003e = like \"squash\", but discard this commit's log message\n# x, exec \u003ccommand\u003e = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop \u003ccommit\u003e = remove commit\n# l, label \u003clabel\u003e = label current HEAD with a name\n# t, reset \u003clabel\u003e = reset HEAD to a label\n# m, merge [-C \u003ccommit\u003e | -c \u003ccommit\u003e] \u003clabel\u003e [# \u003coneline\u003e]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c \u003ccommit\u003e to reword the commit message.\n#\n\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n--\u003e [Edit the file and select what to squash]\npick f7f3f6d Change my name a bit\nsquash 310154e Update README formatting and add blame\nsquash a5f4a0d Add cat-file\n\n--\u003e [Save and exit]\n\n# This is a combination of 3 commits.\n# The first commit's message is:\nChange my name a bit\n\n# This is the 2nd commit message:\n\nUpdate README formatting and add blame\n\n# This is the 3rd commit message:\n\nAdd cat-file\n\n--\u003e [Edit, save and exit]"
    ],
    [
      "Workflows",
      "Rebasing",
      "40",
      "No",
      "\u003cSplitting Commits\u003e",
      "Splitting commits.\n\nSplitting a commit undoes a commit and then partially stages and commits as many times as commits you want to end up with.\n\n 1. Perform an interactive rebase.\n 2. Select the commit(s) to split by marking as \"edit\" instead of \"pick\"\n 3. Save and exit interactive rebase script, script will drop you in command line\n 4. Reset current commit (effectively undoing the commit and leaveing modified files unchanged)\n 5. Stage and commit files as needed\n 6. Continue rebase",
      "https://git-scm.com/docs/git-rebase\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\nhttps://git-rebase.io/",
      "$ git rebase -i HEAD~3\npick f7f3f6d Change my name a bit\npick 310154e Update README formatting and add blame\npick a5f4a0d Add cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick \u003ccommit\u003e = use commit\n# r, reword \u003ccommit\u003e = use commit, but edit the commit message\n# e, edit \u003ccommit\u003e = use commit, but stop for amending\n# s, squash \u003ccommit\u003e = use commit, but meld into previous commit\n# f, fixup \u003ccommit\u003e = like \"squash\", but discard this commit's log message\n# x, exec \u003ccommand\u003e = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop \u003ccommit\u003e = remove commit\n# l, label \u003clabel\u003e = label current HEAD with a name\n# t, reset \u003clabel\u003e = reset HEAD to a label\n# m, merge [-C \u003ccommit\u003e | -c \u003ccommit\u003e] \u003clabel\u003e [# \u003coneline\u003e]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c \u003ccommit\u003e to reword the commit message.\n#\n\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n--\u003e [Edit the file and select what to split]\npick f7f3f6d Change my name a bit\nedit 310154e Update README formatting and add blame\npick a5f4a0d Add cat-file\n\n--\u003e [Save and exit]\n$ git reset HEAD^\n$ git add README\n$ git commit -m 'Update README formatting'\n$ git add lib/simplegit.rb\n$ git commit -m 'Add blame'\n$ git rebase --continue\n\n$ git log -4 --pretty=format:\"%h %s\"\n1c002dd Add cat-file\n9b29157 Add blame\n35cfb2b Update README formatting\nf7f3f6d Change my name a bit"
    ],
    [
      "Commands",
      "rebase",
      "40",
      "Yes",
      "git rebase --abort",
      "Abort a rebase.\n\nThe repo will be returned to the state it was in before you started the rebase.",
      "https://git-scm.com/docs/git-rebase\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\nhttps://git-rebase.io/"
    ],
    [
      "Commands",
      "filter-branch",
      "0",
      "No",
      "git filter-branch --tree-filter 'rm -f \u003cfile\u003e' HEAD",
      "Remove a file from every commit.\n\nThe `--tree-filter` option runs the specified command after each checkout of the project and then recommits the results.\n\nTo run filter-branch on all your branches, you can pass `--all` to the command.",
      "https://git-scm.com/docs/git-filter-branch\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History",
      "$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD\nRewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)\nRef 'refs/heads/master' was rewritten\n\n$ git filter-branch --tree-filter 'rm -f *~' HEAD"
    ],
    [
      "Commands",
      "filter-branch",
      "10",
      "No",
      "git filter-branch --subdirectory-filter \u003csubdirectory\u003e HEAD",
      "Making a subdirectory the new root.",
      "https://git-scm.com/docs/git-filter-branch\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History",
      "$ git filter-branch --subdirectory-filter trunk HEAD\nRewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)\nRef 'refs/heads/master' was rewritten"
    ],
    [
      "Commands",
      "filter-branch",
      "20",
      "No",
      "git filter-branch --commit-filter '\u003cfilter\u003e' HEAD",
      "Change something in each commit.\n\nFor example, change the email address.",
      "https://git-scm.com/docs/git-filter-branch\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History",
      "$ git filter-branch --commit-filter '\n        if [ \"$GIT_AUTHOR_EMAIL\" = \"schacon@localhost\" ];\n        then\n                GIT_AUTHOR_NAME=\"Scott Chacon\";\n                GIT_AUTHOR_EMAIL=\"schacon@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' HEAD"
    ],
    [
      "Commands",
      "rebase",
      "9",
      "No",
      "git rebase --onto \u003cnewparent\u003e \u003coldparent\u003e",
      "Change the parent of a commit from oldparent to newparent.",
      "https://git-scm.com/docs/git-rebase\nhttps://stackoverflow.com/a/29916361",
      "$ git rebase --onto F D\n\n#          Before                           After\r\n#    A---B---C---F---G (branch)        A---B---C---F---G (branch)\r\n#             \\                                     \\\r\n#              D---E---H---I (HEAD)                  E---H---I (HEAD)\n#"
    ],
    [
      "Commands",
      "reset",
      "10",
      "Yes",
      "git reset --soft \u003ccommit\u003e",
      "Move what HEAD points to.\n\nDoes not change the index or working directory:\n\n * Unstaged files: Don't change\n * Staged files: Don't change\n * Commited files: Move to staged\n\nFor example, `git reset --soft HEAD~` will essentially undo the last `git commit` command. When you run `git commit`, Git creates a new commit and moves the branch that `HEAD` points to up to it. When you reset back to `HEAD~` (the parent of `HEAD`), you are moving the branch back to where it was, without changing the index or working directory. You could now update the index and run `git commit` again to accomplish what `git commit --amend` would have done.",
      "https://git-scm.com/docs/git-reset\nhttps://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified",
      "$ git reset --soft HEAD~"
    ],
    [
      "Commands",
      "reset",
      "20",
      "Yes",
      "git reset --mixed \u003ccommit\u003e",
      "Move what HEAD points to and update index with it.\n\nDoes not change the working directory.\n\n * Unstaged files: Don't change\n * Staged files: Move to unstaged\n * Commited files: Move to unstaged\n\nFor example, `git reset --mixed HEAD~` will undo your last commit, but also unstage everything. You rolled back to before you ran all your `git add` and `git commit` commands.\n\n`--mixed` is the default behavior, so it's the same as `git reset HEAD~`.",
      "https://git-scm.com/docs/git-reset\nhttps://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified",
      "$ git reset --mixed HEAD~"
    ],
    [
      "Commands",
      "reset",
      "30",
      "Yes",
      "git reset --hard \u003ccommit\u003e",
      "Move what HEAD points to, update index and working directory with it.\n\n * Unstaged files: Get deleted\n * Staged files: Get deleted\n * Commited files: Get deleted\n\nFor example, `git reset --hard HEAD~` will undo your last commit, the `git add` and `git commit` commands, and all the work you did in your working directory.\n\nIf the contents of the working directory was not previously commited, it will be lost forever.\n\nSee also `git checkout`.",
      "https://git-scm.com/docs/git-reset\nhttps://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified",
      "$ git reset --hard HEAD~"
    ],
    [
      "Comparisons",
      "Resets",
      "0",
      "No",
      "\u003cCheckout vs. Reset\u003e",
      "Comparison of reset and checkout\n\nThe “HEAD” column reads “REF” if that command moves the reference (branch) that HEAD points to, and “HEAD” if it moves HEAD itself.   \nPay especial attention to the 'WD Safe?' column — if it says NO, take a second to think before running that command.\n\n|                           | Level  | HEAD | Index | Workdir | WD Safe? |\n|---------------------------|--------|:----:|:-----:|:-------:|:--------:|\n| `reset --soft [commit]`     | Commit | REF  | NO    | NO      | YES      |\n| `reset [commit]`            | Commit | REF  | YES   | NO      | YES      |\n| `reset --hard [commit]`     | Commit | REF  | YES   | YES     | NO       |\n| `checkout \u003ccommit\u003e`         | Commit | HEAD | YES   | YES     | YES      |\n| `reset [commit] \u003cpaths\u003e`    | File   | NO   | YES   | NO      | YES      |\n| `checkout [commit] \u003cpaths\u003e` | File   | NO   | YES   | YES     | NO       |\n\nReset Types:\n\n * `--soft`: Uncommit changes, changes are left staged (index).\n * `--mixed` (default): Uncommit + unstage changes, changes are left in working tree.\n * `--hard`: Uncommit + unstage + delete changes, nothing left.",
      "https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified"
    ],
    [
      "Commands",
      "diff",
      "5",
      "No",
      "git diff \u003cremote\u003e",
      "Compare what's in the working directory with a remote branch.",
      "https://git-scm.com/docs/git-diff",
      "$ git diff origin/main"
    ],
    [
      "Commands",
      "stash",
      "1",
      "Yes",
      "git stash push -m \"\u003cdescription\u003e\"",
      "Save your local modifications to a new stash entry and reset back to HEAD.",
      "https://git-scm.com/docs/git-stash",
      "$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add \u003cfile\u003e...\" to update what will be committed)\n  (use \"git restore \u003cfile\u003e...\" to discard changes in working directory)\n        modified:   lyrics.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git stash push -m \"Working on Lyrics\"\nSaved working directory and index state On master: Working on Lyrics\n\n$ git stash list\nstash@{0}: On master: Working on Lyrics\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add \u003cfile\u003e...\" to update what will be committed)\n  (use \"git restore \u003cfile\u003e...\" to discard changes in working directory)\n        modified:   lyrics.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    ],
    [
      "Commands",
      "push",
      "21",
      "No",
      "git push \u003cremote\u003e --follow-tags",
      "Pushes all annotated tags to the remote.\n\nNote that lightweight tags are not pushed with this command.",
      "https://git-scm.com/docs/git-push"
    ],
    [
      "Commands",
      "commit",
      "31",
      "Yes",
      "git commit --amend --no-edit",
      "Redo the most recent commit, make the additional changes that were forgotten, stage them, and commit again without editing the commit message.",
      "https://git-scm.com/docs/git-commit\nhttps://git-scm.com/book/en/v2/Git-Basics-Undoing-Things\nhttps://git-scm.com/book/en/v2/Git-Tools-Rewriting-History",
      "$ git commit -m 'Initial commit'\n$ git add forgotten_file\n$ git commit --amend --no-edit"
    ],
    [
      "Commands",
      "blame",
      "0",
      "No",
      "git blame \u003cfile\u003e",
      "Show what revision and author last modified each line of a file",
      "https://git-scm.com/docs/git-blame",
      "$ git blame config.rb\n^5e8863d (Gary Rennie       2012-03-08 23:05:24 +0000  1) class Config\n70d00535 (Bruce Banner      2012-03-08 23:07:41 +0000  2)   attr_accessor :name, :password\n97bdd0cc (Spider Man        2012-03-08 23:08:15 +0000  3)   def initialize(name, password = nil, options = {})"
    ],
    [
      "Commands",
      "blame",
      "10",
      "No",
      "git blame \u003cfile\u003e -L \u003cexpression\u003e",
      "Show what revision and author last modified for a range of a file.\n\nThe expression can be of the form `-L\u003cstart\u003e,\u003cend\u003e:\u003cfile\u003e` or `-L:\u003cfuncname\u003e:\u003cfile\u003e`.\n\n`\u003cstart\u003e` and `\u003cend\u003e` can be a line number, a regular expression or an offset.\n\nThe `funcname` syntax will try to figure out what the bounds of that function are.",
      "https://git-scm.com/docs/git-blame",
      "$ git blame config.rb -L 2,4\n70d00535 (Bruce Banner 2012-03-08 23:07:41 +0000 2)   attr_accessor :name, :password\n97bdd0cc (Spider Man   2012-03-08 23:08:15 +0000 3)   def initialize(name, password = nil, options = {})\n^5e8863d (Gary Rennie  2012-03-08 23:05:24 +0000 4)     @name = name"
    ],
    [
      "Commands",
      "bisect",
      "0",
      "No",
      "git bisect start",
      "Start a bisect session to use binary search and find the commit that introduced a bug.",
      "https://git-scm.com/docs/git-bisect",
      "$ git bisect start\n$ git bisect bad HEAD\n$ git bisect good f608824888b83bbedc1f658be7496ffea467a8fb\nBisecting: 9 revisions left to test after this (roughly 3 steps)\n[fdbfc0d403e5ac0b2659cbfa2cbb061fcca0dc2a] Another Commit\n$ make test\nruby prog.rb 5 | ruby test.rb\n$ git bisect good fdbfc0d403e5ac0b2659cbfa2cbb061fcca0dc2a\nBisecting: 4 revisions left to test after this (roughly 2 steps)\n[18ed2ac1522a014412d4303ce7c8db39becab076] Another Commit\n$ make test\nruby prog.rb 5 | ruby test.rb\nmake: *** [makefile:2: test] Error 1\n$ git bisect bad 18ed2ac1522a014412d4303ce7c8db39becab076\nBisecting: 2 revisions left to test after this (roughly 1 step)\n[9f54462abbb991b167532929b34118113aa6c52e] Another Commit\n$ make test\nruby prog.rb 5 | ruby test.rb\n$ git bisect good 9f54462abbb991b167532929b34118113aa6c52e\nBisecting: 0 revisions left to test after this (roughly 1 step)\n[5db7a7cb90e745e2c9dbdd84810ccc7d91d92e72] Another Commit\n$ make test\nruby prog.rb 5 | ruby test.rb\n$ git bisect good 5db7a7cb90e745e2c9dbdd84810ccc7d91d92e72\n18ed2ac1522a014412d4303ce7c8db39becab076 is the first bad commit\ncommit 18ed2ac1522a014412d4303ce7c8db39becab076\nAuthor: Robert Bittle \u003cguywithnose@gmail.com\u003e\nDate:   Mon Apr 23 06:52:10 2012 -0400\n\n    Another Commit\n\n prog.rb | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git bisect reset\nPrevious HEAD position was 5db7a7c Another Commit\nSwitched to branch 'master'"
    ],
    [
      "Commands",
      "bisect",
      "10",
      "No",
      "git bisect \u003cverdict\u003e \u003ccommit\u003e",
      "Feed the bisect wizard with the verdict on a given commit.\n\nVerdict can be `good` or `bad`.\n\nThe wizard will checkout the next commit to test, until finding the faulty commit.",
      "https://git-scm.com/docs/git-bisect",
      "$ git bisect start\n$ git bisect bad HEAD\n$ git bisect good f608824888b83bbedc1f658be7496ffea467a8fb\nBisecting: 9 revisions left to test after this (roughly 3 steps)\n[fdbfc0d403e5ac0b2659cbfa2cbb061fcca0dc2a] Another Commit\n$ make test\nruby prog.rb 5 | ruby test.rb\n$ git bisect good fdbfc0d403e5ac0b2659cbfa2cbb061fcca0dc2a\nBisecting: 4 revisions left to test after this (roughly 2 steps)\n[18ed2ac1522a014412d4303ce7c8db39becab076] Another Commit\n$ make test\nruby prog.rb 5 | ruby test.rb\nmake: *** [makefile:2: test] Error 1\n$ git bisect bad 18ed2ac1522a014412d4303ce7c8db39becab076\nBisecting: 2 revisions left to test after this (roughly 1 step)\n[9f54462abbb991b167532929b34118113aa6c52e] Another Commit\n$ make test\nruby prog.rb 5 | ruby test.rb\n$ git bisect good 9f54462abbb991b167532929b34118113aa6c52e\nBisecting: 0 revisions left to test after this (roughly 1 step)\n[5db7a7cb90e745e2c9dbdd84810ccc7d91d92e72] Another Commit\n$ make test\nruby prog.rb 5 | ruby test.rb\n$ git bisect good 5db7a7cb90e745e2c9dbdd84810ccc7d91d92e72\n18ed2ac1522a014412d4303ce7c8db39becab076 is the first bad commit\ncommit 18ed2ac1522a014412d4303ce7c8db39becab076\nAuthor: Robert Bittle \u003cguywithnose@gmail.com\u003e\nDate:   Mon Apr 23 06:52:10 2012 -0400\n\n    Another Commit\n\n prog.rb | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git bisect reset\nPrevious HEAD position was 5db7a7c Another Commit\nSwitched to branch 'master'"
    ],
    [
      "Commands",
      "bisect",
      "20",
      "No",
      "git bisect reset",
      "Reset the bisect wizard.",
      "https://git-scm.com/docs/git-bisect",
      "$ git bisect reset\nPrevious HEAD position was 5db7a7c Another Commit\nSwitched to branch 'master'"
    ],
    [
      "Commands",
      "revert",
      "0",
      "Yes",
      "git revert \u003ccommit\u003e",
      "Revert some existing commits.\n\nIn this case, git will create a new commit with the inverse of the given commit. \nThis is useful if the bad commit was already pushed to a public remote.",
      "https://git-scm.com/docs/git-revert\nhttps://www.atlassian.com/git/tutorials/undoing-changes",
      "$ git revert 542c6ca5b1b7fa245934b0ff5ac04ec2ea919a30\nRemoving file3\n[master 1130227] Revert \"Bad commit\"\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 file3"
    ],
    [
      "Commands",
      "merge",
      "20",
      "Yes",
      "git merge --abort",
      "Abort a merge.",
      "https://git-scm.com/docs/git-merge",
      "$ git merge mybranch\nAuto-merging poem.txt\nCONFLICT (content): Merge conflict in poem.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add \u003cfile\u003e...\" to mark resolution)\n        both modified:   poem.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git merge --abort"
    ],
    [
      "Commands",
      "merge",
      "30",
      "Yes",
      "git merge --continue",
      "Continue an interrupted merge after resolving conflicts.",
      "https://git-scm.com/docs/git-merge",
      "$ git merge mybranch\nAuto-merging poem.txt\nCONFLICT (content): Merge conflict in poem.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n$ nano poem.txt\n$ git add poem.txt\n$ git merge --continue\n[master 27c3e65] Merge branch 'mybranch'"
    ],
    [
      "Commands",
      "clone",
      "30",
      "No",
      "git clone --depth \u003cdepth\u003e \u003crepository\u003e",
      "Create a shallow clone with a history truncated to the specified number of commits. \n\nBy default, clones only the history leading to the tip of a single branch.",
      "https://git-scm.com/docs/git-clone"
    ],
    [
      "Commands",
      "clone",
      "40",
      "No",
      "git clone --shallow-since=\u003cdate\u003e \u003crepository\u003e",
      "Create a shallow clone with a history after the specified time.",
      "https://git-scm.com/docs/git-clone",
      "$ git clone --shallow-since=\"3 months\" https://github.com/schacon/ticgit"
    ]
  ]
}
